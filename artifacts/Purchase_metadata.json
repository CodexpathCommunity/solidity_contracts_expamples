{
	"compiler": {
		"version": "0.8.6+commit.11564f7e"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "payable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "InvalidState",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "OnlyBuyer",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "OnlySeller",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ValueNotEven",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [],
				"name": "Aborted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [],
				"name": "ItemReceived",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [],
				"name": "PurchaseConfirmed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [],
				"name": "SellerRefunded",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "abort",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "buyer",
				"outputs": [
					{
						"internalType": "address payable",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "confirmPurchase",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "confirmReceived",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "refundSeller",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "seller",
				"outputs": [
					{
						"internalType": "address payable",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "state",
				"outputs": [
					{
						"internalType": "enum Purchase.State",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "value",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {},
			"version": 1
		},
		"userdoc": {
			"errors": {
				"InvalidState()": [
					{
						"notice": "The function cannot be called at the current state."
					}
				],
				"OnlyBuyer()": [
					{
						"notice": "Only the buyer can call this function."
					}
				],
				"OnlySeller()": [
					{
						"notice": "Only the seller can call this function."
					}
				],
				"ValueNotEven()": [
					{
						"notice": "The provided value has to be even."
					}
				]
			},
			"kind": "user",
			"methods": {
				"abort()": {
					"notice": "Abort the purchase and reclaim the ether. Can only be called by the seller before the contract is locked."
				},
				"confirmPurchase()": {
					"notice": "Confirm the purchase as buyer. Transaction has to include `2 * value` ether. The ether will be locked until confirmReceived is called."
				},
				"confirmReceived()": {
					"notice": "Confirm that you (the buyer) received the item. This will release the locked ether."
				},
				"refundSeller()": {
					"notice": "This function refunds the seller, i.e. pays back the locked funds of the seller."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"purchase.sol": "Purchase"
		},
		"evmVersion": "berlin",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"purchase.sol": {
			"keccak256": "0x8773a6c22a08bde99c5691d8da12cf5c318216d7e74439a2ccfcf906525d3ef1",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://7bc1841f4858af941aacb0e40e9990312a283b4cc6232a5974e8f11e6a3d2f45",
				"dweb:/ipfs/QmSaKRzRfZ1LLiSYzRRVcb6Tq7prVDGSFByKeja5HYXLyA"
			]
		}
	},
	"version": 1
}